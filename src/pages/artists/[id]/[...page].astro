---
import type { GetStaticPathsOptions } from "astro";
import Layout from "../../../layouts/layout.astro";
import type { Artist, Tablature } from "../../../clients/model";
import { TablatureClient } from "../../../clients/tablature";
import TablatureList from "../../../components/list/tablature/tablature-list.astro";
import Pagination from "../../../components/list/pagination.astro";
import { PER_PAGE_TABLATURE_COUNT } from "../../../constant";

type Props = {
    artist: Artist;
    page: { [key: string]: any };
};

export async function getStaticPaths({ paginate }: GetStaticPathsOptions) {
    const tablatures = await TablatureClient.getALLTablatures();

    let items: { [id: Artist["id"]]: { artist: Artist; tablatures: Tablature[] } } = {};
    for (const tablature of tablatures) {
        if (!(tablature.artist.id in items)) {
            items[tablature.artist.id] = { artist: tablature.artist, tablatures: [] };
        }
        items[tablature.artist.id]["tablatures"].push(tablature);
    }

    return Object.values(items).flatMap((item) =>
        paginate(item.tablatures, {
            params: { id: item.artist.id },
            props: { artist: item.artist },
            pageSize: PER_PAGE_TABLATURE_COUNT,
        }),
    );
}

// レコード数はpage.totalで取得できる
const {
    artist,
    page: { currentPage, lastPage, data },
} = Astro.props;
---

<Layout title={`${artist.name}のTAB譜`}>
    <div class="container mx-auto mt-5 flex flex-col">
        <h1 class="text-xl mb-7 text-center">{artist.name}のTAB譜</h1>
        <TablatureList tablatures={data} />
        <Pagination path={`/artists/${artist.id}`} currentPage={currentPage} lastPage={lastPage} />
    </div>
</Layout>
